# HMA Infrastructure and Application Services
# Merged docker-compose orchestrating all services for local development

services:
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  
  # PostgreSQL with PostGIS extensions
  postgres:
    image: postgis/postgis:16-3.4
    container_name: hma_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hma_academy
      POSTGRES_USER: hma_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      APP_PASSWORD: ${APP_PASSWORD:-app_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init:/docker-entrypoint-initdb.d
      - ../database/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hma_admin -d hma_academy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hma-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis for caching and queues
  redis:
    image: redis:7.2-alpine
    container_name: hma_redis
    restart: unless-stopped
    command: >-
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "development_redis", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hma-network

  # MinIO for S3-compatible object storage
  minio:
    image: quay.io/minio/minio:RELEASE.2024-09-22T00-33-43Z
    container_name: hma_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - hma-network

  # ============================================================================
  # MANAGEMENT & ADMIN TOOLS
  # ============================================================================

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: hma_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - hma-network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: hma_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - hma-network
    depends_on:
      redis:
        condition: service_healthy

  # ============================================================================
  # OBSERVABILITY & MONITORING
  # ============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: hma_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - hma-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: hma_alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.config.file=/etc/alertmanager/web.yml'
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ../monitoring/alertmanager-web.yml:/etc/alertmanager/web.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - hma-network
    depends_on:
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: hma_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_SERVER_ROOT_URL: http://localhost:3003
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana-provisioning/dashboards/json:/var/lib/grafana/dashboards/hma:ro
    networks:
      - hma-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: hma_jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4318:4318"    # OTLP HTTP receiver
      - "6831:6831/udp" # Jaeger Thrift compact
    networks:
      - hma-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  # HMA Academy Brain - Core backend service
  hma-academy-brain:
    build: ../../hma-academy-brain
    container_name: hma-academy-brain
    restart: unless-stopped
    env_file:
      - ../../hma-academy-brain/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      # Docker-specific overrides for infrastructure connectivity
      DATABASE_PROVIDER: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hma_academy
      DB_USER: hma_admin
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: "false"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDPANDA_BROKERS: redpanda:29092
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_USER}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
      MINIO_USE_SSL: "false"
      PORT: 3001
      NODE_ENV: production
      # Frontend URL for email links (overrides .env default)
      APP_FRONTEND_URL: http://172.16.0.4:3004
      # Observability stack URLs (Docker internal networking)
      PROMETHEUS_URL: http://hma_prometheus:9090
      GRAFANA_URL: http://hma_grafana:3000
      GRAFANA_API_KEY: ${GRAFANA_API_KEY}
      JAEGER_URL: http://hma_jaeger:16686
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://hma_jaeger:4318/v1/traces
      OTEL_LOG_LEVEL: warn
      # External URLs for browser access (used in embed URLs)
      EXTERNAL_GRAFANA_URL: http://localhost:3003
      EXTERNAL_JAEGER_URL: http://localhost:16686
      # Stripe configuration for test mode (development)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      # Subscription tier prices
      STRIPE_PRICE_BASIC: ${STRIPE_PRICE_BASIC}
      STRIPE_PRICE_PRO: ${STRIPE_PRICE_PRO}
      STRIPE_PRICE_FAMILY: ${STRIPE_PRICE_FAMILY}
      STRIPE_PRICE_FAMILY_PRO: ${STRIPE_PRICE_FAMILY_PRO}
      # CISO Assistant Integration
      CISO_ENABLED: "true"
      CISO_API_URL: http://hma-ciso-backend:8000
      CISO_USERNAME: admin@huntmasteracademy.com
      CISO_PASSWORD: HMA_Compliance_Admin_2025!
      # Wazuh SIEM Integration
      WAZUH_ENABLED: "true"
      WAZUH_API_URL: https://hma-wazuh-manager:55000
      WAZUH_USERNAME: admin
      WAZUH_PASSWORD: admin
      # Credit pack prices (one-time purchases)
      STRIPE_PRICE_PACK_BASIC: price_1SJl4kLvXJCUNd18H5ufNhJ5
      STRIPE_PRICE_PACK_INTERMEDIATE: price_1SJl4lLvXJCUNd1823fgsbwt
      STRIPE_PRICE_PACK_ADVANCED: price_1SJl4mLvXJCUNd182rdsoPXg
    ports:
      - "3001:3001"
    volumes:
      # Mount hma-content for migration scripts (read-only)
      - ../../hma-content:/hma-content:ro
      # Mount scripts directory for development (read-only)
      - ../../hma-academy-brain/scripts:/app/scripts:ro
    networks:
      - hma-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # GameCalls Engine - Audio analysis and species identification
  hma-gamecalls-engine:
    build:
      context: ../../hma-gamecalls-engine
      dockerfile: backend/Dockerfile.multistage
    container_name: hma-gamecalls-engine
    restart: unless-stopped
    entrypoint: ["/app/docker-entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      # Infrastructure connectivity
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hma_academy
      DB_USER: hma_admin
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 1
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_USER}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
      MINIO_USE_SSL: "false"
      # Server configuration
      PORT: 5005
      NODE_ENV: production
      ALLOWED_ORIGINS: "http://localhost:8000,http://localhost:3000,http://localhost:3004"
      # Logging
      LOG_LEVEL: info
    ports:
      - "5005:5005"
    volumes:
      # [20251029-DOCKER-001] Mount only source code for hot reload
      - ../../hma-gamecalls-engine/backend/src:/app/src
      - ../../hma-gamecalls-engine/backend/migrations:/app/migrations
      # [20251102-DOCKER-004] Mount scripts for running analysis tools
      - ../../hma-gamecalls-engine/scripts:/app/scripts
      # [20251030-FIX-003] Don't mount bindings - use compiled version from image
      # Preserve container's node_modules and bindings (installed during build)
    networks:
      - hma-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  # HMA Event Consumer Worker - Processes events from Redpanda
  hma-event-consumer:
    build: ../../hma-academy-brain
    container_name: hma-event-consumer
    restart: unless-stopped
    command: npm run worker:events
    env_file:
      - ../../hma-academy-brain/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      hma-academy-brain:
        condition: service_healthy
    environment:
      # Docker-specific overrides
      DATABASE_PROVIDER: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hma_academy
      DB_USER: hma_admin
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: "false"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDPANDA_BROKERS: redpanda:29092
      NODE_ENV: production
      # CISO Assistant (compliance integration)
      CISO_API_URL: http://hma-ciso-backend:8000
      CISO_USERNAME: admin@huntmasteracademy.com
      CISO_PASSWORD: HMA_CISO_Integration_2025!
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://hma_jaeger:4318/v1/traces
      OTEL_LOG_LEVEL: warn
    networks:
      - hma-network

  # HMA Academy API Gateway - Routes and proxies to backend services
  hma-academy-api:
    build: ../../hma-academy-api
    container_name: hma-academy-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://hma_jaeger:4318/v1/traces
      OTEL_LOG_LEVEL: warn
      ACADEMY_BRAIN_URL: http://hma-academy-brain:3001
      BRAIN_URL: http://hma-academy-brain:3001
    depends_on:
      hma-academy-brain:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - hma-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # HMA Academy Web - Frontend application
  hma-academy-web:
    build: 
      context: ../../hma-academy-web
      target: development
    container_name: hma-academy-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DOCKER: "true"
      PORT: 3004
      # Don't override VITE_API_URL - let it use .env value (http://localhost:3004/api)
      # Browser needs localhost for proxy, not internal Docker hostname
    depends_on:
      hma-academy-api:
        condition: service_healthy
    ports:
      - "3004:3004"
    networks:
      - hma-network
    volumes:
      - ../../hma-academy-web:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3004"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # OBSERVABILITY EXPORTERS
  # ============================================================================

  # PostgreSQL exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: hma_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://hma_admin:${DB_PASSWORD}@postgres:5432/hma_academy?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - hma-network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:v1.60.0
    container_name: hma_redis_exporter
    restart: unless-stopped
    command: ["--redis.addr=redis:6379", "--redis.password=${REDIS_PASSWORD}"]
    ports:
      - "9121:9121"
    networks:
      - hma-network
    depends_on:
      redis:
        condition: service_healthy

  # Blackbox exporter for frontend HTTP probes
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: hma_blackbox_exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - hma-network
    volumes:
      - ../monitoring/blackbox.yml:/etc/blackbox/config.yml:ro
    command:
      - '--config.file=/etc/blackbox/config.yml'

  # ============================================================================
  # ML & CONTENT SERVICES (Optional - can be enabled as needed)
  # ============================================================================

  # ML Model Server (for local testing)
  # ml-server:
  #   build:
  #     context: ../ml-server
  #     dockerfile: Dockerfile
  #   container_name: hma-ml-server
  #   environment:
  #     MODEL_PATH: /models
  #     REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
  #     POSTGRES_URL: postgresql://hma_admin:${DB_PASSWORD}@postgres:5432/hma_academy
  #     MINIO_ENDPOINT: minio:9000
  #     MINIO_ACCESS_KEY: ${MINIO_USER}
  #     MINIO_SECRET_KEY: ${MINIO_PASSWORD}
  #   ports:
  #     - "8010:8000"
  #   volumes:
  #     - ../models:/models
  #     - ../ml-server/src:/app
  #   networks:
  #     - hma-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

  # Content Bridge (for local content delivery)
  # content-bridge:
  #   build:
  #     context: ../services/content-bridge
  #     dockerfile: Dockerfile
  #   container_name: hma-content-bridge
  #   environment:
  #     CONTENT_MODE: ${CONTENT_MODE:-local}
  #     CONTENT_ROOT: /content
  #     CACHE_DIR: /cache
  #     S3_BUCKET: ${CONTENT_BUCKET:-}
  #     CDN_URL: ${CDN_URL:-http://localhost:8090}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   ports:
  #     - "8090:8090"
  #   volumes:
  #     - /home/xbyooki/projects/hma-content:/content:ro
  #     - ../generated/content:/generated
  #     - content-cache:/cache
  #   networks:
  #     - hma-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local
  content-cache:
    driver: local

networks:
  hma-network:
    external: true
